# Tox (http://tox.testrun.org/) is a tool for running tests
# in multiple virtualenvs. This configuration file will run the
# test suite on all supported python versions. To use it, "pip install tox"
# and then run "tox" from this directory.

[tox]
isolated_build = true
envlist =
    lint
    flake8
    py

[testenv]
# forward env.vars to tox env for tests\test_implementations\test_sqldb.py
passenv =
    LNAME
    LOGNAME
    USER
    USERNAME
commands =
    coverage run -p -m pytest --durations=20 {posargs:tests}
    coverage combine
    coverage xml
deps =
    pytest
    coverage
    semsimian
    gilda
    linkml

[testenv:lock]
skip_install = true
commands = poetry lock
deps = poetry
description = Lock dependencies with poetry

[testenv:lint]
deps =
    black
    isort
skip_install = true
commands =
    black src/ tests/
    isort src/ tests/
description = Run linters.

[testenv:flake8]
skip_install = true
deps =
    flake8<5.0.0
    flake8-bandit
    flake8-black
    flake8-bugbear
    flake8-colors
    flake8-isort
    pep8-naming
commands =
    flake8 src/ tests/
description = Run the flake8 tool with several plugins (bandit, docstrings, import order, pep8 naming).

#########################
# Flake8 Configuration  #
# (.flake8)             #
#########################
[flake8]
ignore =
    E203
    W503
    C901 # needs code change so ignoring for now.
    E731 # needs code change so ignoring for now.
    S101 # asserts are fine
    S106 # flags false positives with test_table_filler
    N801 # mixed case is bad but there's a lot of auto-generated code
    N815 # same ^
    S404 # Consider possible security implications associated with the subprocess module.
    S108 # Probable insecure usage of temp file/directory.
    S307 # Use of possibly insecure function - consider using safer ast.literal_eval.
    S603 # subprocess call - check for execution of untrusted input.
    S607 # Starting a process with a partial executable path ["open" in both cases]
    S608 # Possible SQL injection vector through string-based query construction.
    B024 # StreamingWriter is an abstract base class, but it has no abstract methods. 
         # Remember to use @abstractmethod, @abstractclassmethod and/or @abstractproperty decorators.
    B027 # empty method in an abstract base class, but has no abstract decorator. Consider adding @abstractmethod
    N803 # math-oriented classes can ignore this (e.g. hypergeometric.py)
    N806 # math-oriented classes can ignore this (e.g. hypergeometric.py)
    B019
    S113 # new check - deal with this later
    
max-line-length = 120
max-complexity = 13
import-order-style = pycharm
application-import-names =
    oaklib
    tests
exclude =
    datamodels   ## datamodels are auto-generated
