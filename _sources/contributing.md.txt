# Contribution Guidelines

All contributions are welcome!

But we warned until [v0.2.0](https://github.com/INCATools/ontology-access-kit/milestone/1) things may be in flux!

## Reporting issues and giving general feedback

Please use the [issue tracker](https://github.com/INCATools/ontology-access-kit/issues) for questions, bugs, enhancements, feature requests, etc

## Contributing documentation

Documentation, tutorials, etc have source that resides in the [docs folder](https://github.com/INCATools/ontology-access-kit/tree/main/docs)

Note that GitHub actions will automatically build live docs from these

- follow diataxis.fr
- `.rst` or `.md` can be used
    - `.rst` preferred for anything that requires docstrings

## Contributing code

### Understand design patterns used

Please first read the [docs](https://incatools.github.io/ontology-access-kit/)

In particular:

- [architecture](https://incatools.github.io/ontology-access-kit/architecture) 
- [best-practice](https://incatools.github.io/ontology-access-kit/best-practice) 
- [concepts](https://incatools.github.io/ontology-access-kit/best-practice/concepts) 

### Please make a Pull Request for all contributions.

We prefer making PRs sooner rather than later - just mark your PR as Draft if it is not ready for review

### Always write tests

If contributing new features, always make sure there is a unit test for it

- [tests folder](https://github.com/INCATools/ontology-access-kit/tree/main/tests)

Use the existing [input](https://github.com/INCATools/ontology-access-kit/tree/main/tests/input) as far as possible

Avoid `print`ing - use logging for diagnostics, and capture output and test it explicitly

New test contributions are welcome, even if not contributing new functionality!

### How to contribute a plugin

See oakx-robot as an exemplar

1. Register a unique scheme in `__init__.py`
2. Create an implementation class that implements at least one interface
    - include a `__post_init__`

### How to contribute a new subcommand

Add to `cli.py`

Note that we may refactor CLI substantially prior to 0.2.0

Always add a test to [test-cli](https://github.com/INCATools/ontology-access-kit/blob/main/tests/test_cli.py)

Consider adding a notebook

### How to contribute to a notebook or add a new notebook

- github diffs don't work well for notebooks, so coordinate in advance between making PRs on one
- new notebooks welcome
- notebook should run start to end using the standard dev environment

### How to contribute a new adapter/implementation

TODO

Always add a test to [test_implementations](https://github.com/INCATools/ontology-access-kit/blob/main/tests/test_implementations)

### How to contribute a new utility function

TODO

Always add a test to [test_utilities](https://github.com/INCATools/ontology-access-kit/blob/main/tests/test_utilities)

### How to contribute a datamodel

- author in LinkML
- add a Makefile target to generate corresponding .py (and .schema.json file if required)

## Release to PyPI

A Github action is set up to automatically release the package to PyPI. When it is ready for a new release, create a [Github release](https://github.com/linkml/releases). The version should be in the vX.X.X format following [the semantic versioning specification](https://semver.org/).

Release notes should always be autogenerated (just click the "generate release notes" button) - these can be tweaked but the emphasis should be on making sure PR titles and githu issue titles are clear and concise. Note we don't keep a separate CHANGELOG file, it all goes in the release notes.

After the release is created, the GitHub action will be triggered to publish to PyPI. The release version will be used to create the PyPI package.

If the PyPI release failed, make fixes, [delete](https://docs.github.com/en/enterprise/2.16/user/github/administering-a-repository/editing-and-deleting-releases#deleting-a-release) the GitHub release, and recreate a release with the same version again.
